import{_ as s,o as a,c as n,N as l}from"./chunks/framework.2b153404.js";const C=JSON.parse('{"title":"JavaScript基础","description":"","frontmatter":{},"headers":[],"relativePath":"articles/07-前端开发/Javascript/JavaScript基础.md","lastUpdated":1681721444000}'),p={name:"articles/07-前端开发/Javascript/JavaScript基础.md"},e=l(`<h1 id="javascript基础" tabindex="-1">JavaScript基础 <a class="header-anchor" href="#javascript基础" aria-label="Permalink to &quot;JavaScript基础&quot;">​</a></h1><h2 id="_1-介绍" tabindex="-1">1.介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1.介绍&quot;">​</a></h2><p>作用：网页特效（监听用户行为使得网页进行反馈）、表单验证（针对表单数据的合法性进行判断）、数据交互（获取后台数据渲染）、服务端编程（node.js)</p><p>组成：ECMAScript语法规范、WebAPIs（DOM——页面文档对象模型，BOM——浏览器对象模型）</p><div class="language-mermaid line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">flowchart</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TD</span></span>
<span class="line"><span style="color:#A6ACCD;">    A</span><span style="color:#89DDFF;font-style:italic;">((</span><span style="color:#C3E88D;">JavaScript</span><span style="color:#89DDFF;font-style:italic;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">---&gt;</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">((</span><span style="color:#C3E88D;">ECMAScript</span><span style="color:#89DDFF;font-style:italic;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    A </span><span style="color:#89DDFF;font-style:italic;">---&gt;</span><span style="color:#A6ACCD;"> C</span><span style="color:#89DDFF;font-style:italic;">((</span><span style="color:#C3E88D;">WebAPIs</span><span style="color:#89DDFF;font-style:italic;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    C </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> D</span><span style="color:#89DDFF;font-style:italic;">((</span><span style="color:#C3E88D;">DOM</span><span style="color:#89DDFF;font-style:italic;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    C </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> E</span><span style="color:#89DDFF;font-style:italic;">((</span><span style="color:#C3E88D;">BOM</span><span style="color:#89DDFF;font-style:italic;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="_1-1引入方式" tabindex="-1">1.1引入方式 <a class="header-anchor" href="#_1-1引入方式" aria-label="Permalink to &quot;1.1引入方式&quot;">​</a></h3><p>JavaScript程序不能独立运行，它需要被嵌入HTML中，浏览器才能执行JavaScript代码，通过标签 <code>script</code>将JavaScript引入HTML中。</p><hr><h4 id="_1-1-1内部方式" tabindex="-1">1.1.1内部方式 <a class="header-anchor" href="#_1-1-1内部方式" aria-label="Permalink to &quot;1.1.1内部方式&quot;">​</a></h4><p>直接写在HTML文件里，用 <code>script</code>标签包住，规范：<code>script</code>标签写在 <code>&lt;body&gt;</code>内部 <code>&lt;/body&gt;</code></p><p>将 <code>&lt;script&gt;</code> 放在HTML文件底部原因是浏览器会按照代码在文件中的顺序加载HTML，如果先加载的JavaScript期望修改其下方的HTML，那么它可能由于尚未加载而失效。</p><hr><h4 id="_1-1-2外部方式" tabindex="-1">1.1.2外部方式 <a class="header-anchor" href="#_1-1-2外部方式" aria-label="Permalink to &quot;1.1.2外部方式&quot;">​</a></h4><p>代码写在以.js结尾的文件里，通过 <code>&lt;script&gt;&lt;/script&gt;</code> 标签引入HTML页面当中</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>script标签中间无需写代码，否则会被忽略，外部JavaScript文件会使代码更加有序，更易于复用，无脚本混合，HTML更易读</p><hr><h4 id="_1-1-3内联方式" tabindex="-1">1.1.3内联方式 <a class="header-anchor" href="#_1-1-3内联方式" aria-label="Permalink to &quot;1.1.3内联方式&quot;">​</a></h4><p>代码写在标签内部，Vue常用</p><p>示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;">alert</span><span style="color:#C3E88D;">()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">提示</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h3 id="_1-2注释写法" tabindex="-1">1.2注释写法 <a class="header-anchor" href="#_1-2注释写法" aria-label="Permalink to &quot;1.2注释写法&quot;">​</a></h3><p>单行：//</p><p>块注释：/* */</p><p>结束符：； 可写可不写</p><hr><h3 id="_1-3输入输出语法" tabindex="-1">1.3输入输出语法 <a class="header-anchor" href="#_1-3输入输出语法" aria-label="Permalink to &quot;1.3输入输出语法&quot;">​</a></h3><p>输出语法：</p><p>示例1：</p><p><code>document.write(&#39;要输出的内容&#39;) 、</code></p><p>向body内输出内容，如果输出的内容是标签，也会解析成网页元素</p><p><code>document.write(&#39;我是div标签&#39;)</code></p><p><code>document.write(&#39;&lt;h1&gt;我是标题&lt;/h1&gt;&#39;)</code></p><p>示例2：</p><p><code>alert(&#39;要输出的内容&#39;)</code></p><p>页面弹出警告对话框</p><p>示例3：</p><p><code>console.log(&#39;控制台打印&#39;)</code></p><p>控制台输出语法，用于调试</p><p>输入语法：</p><p><code>prompt(&#39;请输入您的姓名&#39;)</code></p><p>显示一个对话框，对话框中包含一天文字信息，用来提示用户输入</p><p>JavaScript代码执行顺序：</p><p>按HTML文档流顺序执行JavaScript代码；alert()和prompt()会跳过页面渲染先被执行。</p><hr><h3 id="_1-4-字面量" tabindex="-1">1.4 字面量 <a class="header-anchor" href="#_1-4-字面量" aria-label="Permalink to &quot;1.4 字面量&quot;">​</a></h3><p>在计算机中描述事物</p><hr><h2 id="_2-变量" tabindex="-1">2.变量 <a class="header-anchor" href="#_2-变量" aria-label="Permalink to &quot;2.变量&quot;">​</a></h2><p>计算机存储数据的容器</p><p>注意：const优先，const语义化更好</p><p>基本数据类型若发生改变则不能用const用 let，但引用数据类型内部发生改变可以用const，因为引用数据类型变量中存储的仅仅是实例化对象的地址，实例化对象结构数据发生变化，但地址不会发生改变</p><p>建议数组和对象都使用const声明</p><p>示例：以下语法错误，因为地址不同</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">={}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>但可以改为以下方式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="_2-1变量的使用" tabindex="-1">2.1变量的使用 <a class="header-anchor" href="#_2-1变量的使用" aria-label="Permalink to &quot;2.1变量的使用&quot;">​</a></h3><p>声明：</p><p><code>let 变量名</code></p><p>声明关键字 变量名（标识符）</p><p>赋值：</p><p>变量名=数值</p><p>初始化：声明变量同时完成赋值操作</p><p>注：let不允许多次声明一个变量，但var可以；临时变量不用自动销毁</p><hr><h3 id="_2-2-变量的本质和命名规则规范" tabindex="-1">2.2 变量的本质和命名规则规范 <a class="header-anchor" href="#_2-2-变量的本质和命名规则规范" aria-label="Permalink to &quot;2.2 变量的本质和命名规则规范&quot;">​</a></h3><p>本质：程序在内存中申请的一小块用来存放数据的小空间</p><p>规则：不能有关键字，只用下划线、字母、数字、$组成，且数字不能开头，字母严格区分大小写</p><p>规范：名称要有意义，建议小驼峰命名法：第一个单词首字母小写，后面每个单词首字母大写，如：userName</p><hr><h3 id="_2-3-变量声明关键字let和var的区别" tabindex="-1">2.3 变量声明关键字let和var的区别 <a class="header-anchor" href="#_2-3-变量声明关键字let和var的区别" aria-label="Permalink to &quot;2.3 变量声明关键字let和var的区别&quot;">​</a></h3><p>在较旧的JavaScript中，使用关键字var来声明变量，而不是let，var在现在的开发中一般不再使用；</p><p>let解决了var的一些不合理问题：</p><p>var可以先使用再声明，var声明过的变量可以重复声明，var在变量提升、全局变量、没有块级作用域等问题</p><hr><h3 id="_2-4-数组" tabindex="-1">2.4 数组 <a class="header-anchor" href="#_2-4-数组" aria-label="Permalink to &quot;2.4 数组&quot;">​</a></h3><p>声明：</p><p><code>let 数组名=[数据1,数据2,...,数据n]</code></p><p>数组可以存储任意类型的数据</p><p>取值语法：</p><p><code>数组名[下标] </code></p><p>增添：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(元素1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">元素2</span><span style="color:#89DDFF;">,...,</span><span style="color:#A6ACCD;">元素n)</span><span style="color:#676E95;font-style:italic;">//将一个或多个元素添加到数组的末尾，并返回数组的新长度</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unshift</span><span style="color:#A6ACCD;">(内容)</span><span style="color:#676E95;font-style:italic;">//将一个或多个元素添加到数组的开头，并返回该数组的长度</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>删除：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//从数组中删除最后一个元素，并返回该元素值</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//从数组中删除第一个元素，并返回该元素值</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(start</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">deleteCount)</span><span style="color:#676E95;font-style:italic;">//删除指定元素，deleteCount缺省为从指定删除到最后</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h2 id="_3-常量" tabindex="-1"><strong>3. 常量</strong> <a class="header-anchor" href="#_3-常量" aria-label="Permalink to &quot;**3. 常量**&quot;">​</a></h2><p>使用const声明的变量为常量</p><p>当某个变量永远不会改变时用const声明而非let</p><p>命名规范与变量保持一致</p><p><code>const 常量名=数值</code></p><p>常量不允许重新赋值,声明时必须初始化</p><hr><h2 id="_4-数据类型" tabindex="-1">4.数据类型 <a class="header-anchor" href="#_4-数据类型" aria-label="Permalink to &quot;4.数据类型&quot;">​</a></h2><h3 id="_4-1-基本数据类型" tabindex="-1">4.1 基本数据类型 <a class="header-anchor" href="#_4-1-基本数据类型" aria-label="Permalink to &quot;4.1 基本数据类型&quot;">​</a></h3><h4 id="_4-1-1-number-数字型" tabindex="-1">4.1.1 number 数字型 <a class="header-anchor" href="#_4-1-1-number-数字型" aria-label="Permalink to &quot;4.1.1 number 数字型&quot;">​</a></h4><p>JavaScript中的正数、负数、小数等数字统一称为数字型</p><p>JavaScript 是若数据类型，变量到底属于哪种类型只有赋值后才能确认，而Java是强数据类型。</p><p>NaN代表一个计算错误，任何对NaN的操作都会返回NaN</p><h4 id="_4-1-2-string-字符串型" tabindex="-1">4.1.2 string 字符串型 <a class="header-anchor" href="#_4-1-2-string-字符串型" aria-label="Permalink to &quot;4.1.2 string 字符串型&quot;">​</a></h4><p>通过单引号（&#39; &#39;）、双引号（&quot;&quot;）或反引号（\`）包裹的数据都是字符串</p><p>单引号双引号可以互相嵌套，但是不可以自己嵌套自己，外双内单或外单内双；</p><p>必要时可以使用转义符\\，输出单引号或双引号</p><p>字符串拼接：+运算符可以实现字符串的拼接</p><p>模板字符串：拼接字符串和变量</p><p>\`\` 反引号，内容拼接变量时，用\${ }包住变量</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我今年18岁了</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我今年</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">岁了</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//两者相同</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_4-1-3-boolean-布尔型" tabindex="-1">4.1.3 boolean 布尔型 <a class="header-anchor" href="#_4-1-3-boolean-布尔型" aria-label="Permalink to &quot;4.1.3 boolean 布尔型&quot;">​</a></h4><p>两取值true和false</p><h4 id="_4-1-4-undefined-未定义型" tabindex="-1">4.1.4 undefined 未定义型 <a class="header-anchor" href="#_4-1-4-undefined-未定义型" aria-label="Permalink to &quot;4.1.4 undefined 未定义型&quot;">​</a></h4><p>未定义只有一个值undefined。只声明变量，不赋值的情况下，变量默认值为undefined。</p><p>使用场景：声明变量等待传送数据，通过检测此变量是否是undefined，判断是否有数据传送。</p><h4 id="_4-1-5-null-空类型" tabindex="-1">4.1.5 null 空类型 <a class="header-anchor" href="#_4-1-5-null-空类型" aria-label="Permalink to &quot;4.1.5 null 空类型&quot;">​</a></h4><p>代表“无”、“空”特殊值</p><p>undefined表示没赋值，null表示赋值了，内容为空</p><p>使用场景：把null作为尚未创建的对象</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined+</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null+</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>null：空对象；<code>null === let obj={}</code></p><h4 id="_4-1-6-检测数据类型" tabindex="-1">4.1.6 检测数据类型 <a class="header-anchor" href="#_4-1-6-检测数据类型" aria-label="Permalink to &quot;4.1.6 检测数据类型&quot;">​</a></h4><p>1、使用控制台输出</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">刘</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> flag</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> buy</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">flag</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">buy)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2、通过typeof关键字检测</p><p>typeof运算符可以返回被检测的数据类型</p><p>作为运算符使用：<code>typeof x </code> 函数形式：<code>typeof(x)</code></p><hr><h3 id="_4-2-引用数据类型" tabindex="-1">4.2 引用数据类型 <a class="header-anchor" href="#_4-2-引用数据类型" aria-label="Permalink to &quot;4.2 引用数据类型&quot;">​</a></h3><p>复杂数据类型，在存储变量时仅存储地址，通过new创建的对象object 对象、Array、Date等</p><p>栈中存放简单数据类型、堆中存放复杂数据类型</p><p>引用类型的变量（栈）里存放的是地址，真正的对象实例存放在堆中</p><h2 id="_5-类型转换" tabindex="-1">5. 类型转换 <a class="header-anchor" href="#_5-类型转换" aria-label="Permalink to &quot;5. 类型转换&quot;">​</a></h2><p>prompt、表单的数据类型默认字符串值</p><h3 id="_5-1-隐式转换" tabindex="-1">5.1 隐式转换 <a class="header-anchor" href="#_5-1-隐式转换" aria-label="Permalink to &quot;5.1 隐式转换&quot;">​</a></h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，此为隐式转换。</p><p>规则：+两边只要有一个是字符串，都会把另一个转换成字符串</p><p>除了+以外的运算符，其他都会把数据转换成数字类型</p><p>+号作为正号后跟数据可以转换成数字型</p><p>注意：1、有字符串的加法&quot;&quot;+1，结果为&quot;1&quot;</p><p>2、减法只能用于数字，会使空字符串转换成0</p><p>3、null经过数字转换后变为0</p><p>4、undefined经过数字转换后变成NaN</p><h3 id="_5-2-显示转换" tabindex="-1">5.2 显示转换 <a class="header-anchor" href="#_5-2-显示转换" aria-label="Permalink to &quot;5.2 显示转换&quot;">​</a></h3><p>Number(数据)</p><p>转换成数字类型，若字符串内有非数字，转换失败则结果为NaN；NaN也是number类数据，代表非数字</p><p>parseInt(数据)：只保留整数</p><p>parseFloat(数据)：可以保留小数</p><p>运算符：比较运算符有隐式转换，最终会把数据隐式转换成number类型再比较，==只判断值是否一样，===判断值和类型是否都一样，全等</p><p>NaN不可进行运算，包括比较运算符，涉及到NaN的比较都是false</p><p>注意：&#39;&#39;、0、undefined、null、false、NaN布尔值均为false，其余为true</p><hr><h2 id="_6-函数" tabindex="-1">6.函数 <a class="header-anchor" href="#_6-函数" aria-label="Permalink to &quot;6.函数&quot;">​</a></h2><h3 id="_6-1-函数基本使用" tabindex="-1">6.1 函数基本使用 <a class="header-anchor" href="#_6-1-函数基本使用" aria-label="Permalink to &quot;6.1 函数基本使用&quot;">​</a></h3><p>函数声明：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">函数名</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">参数列表</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">函数体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>命名规范：和变量名规范基本一致，尽量小驼峰命名，前缀应为动词</p><p>调用：<code>函数名(传递的参数列表)</code></p><p>如果不输入实参，则默认undefined，可以加默认值</p><p>注意：函数名相同，后面覆盖前面；</p><p>实参多于形参，剩余的实参不参与运算，实参少于形参，剩下形参默认值或undefined（函数内部有arguments承载所有实参）；</p><p>如果函数内部未声明一个变量而是直接使用此变量直接赋值，则当全局变量使用，函数内部的形参是局部变量。</p><p>同名变量访问原则：能够访问到的情况下，先局部，再全局（自底向上层层递进访问——就近原则）</p><h3 id="_6-2-匿名函数" tabindex="-1">6.2 匿名函数 <a class="header-anchor" href="#_6-2-匿名函数" aria-label="Permalink to &quot;6.2 匿名函数&quot;">​</a></h3><p>具名函数：其调用可以写在任何位置</p><p>声明：function fn(){}，调用：fn()</p><p>匿名函数：function(){}</p><p>匿名函数由于无名，无法直接使用</p><p>函数表达式：将匿名函数赋值给一个变量，且通过变量名称进行调用</p><p>示例：</p><p><code>let fn=function(){//函数体}</code>调用只能在声明之后</p><p>立即执行函数：避免全局变量之间的污染</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">形参列表</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">11</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(实参值列表)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">形参列表</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">11</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">(实参值列表))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>立即执行函数之间使用；隔开</p><hr><h2 id="_7-逻辑中断" tabindex="-1">7.逻辑中断 <a class="header-anchor" href="#_7-逻辑中断" aria-label="Permalink to &quot;7.逻辑中断&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getSum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">||</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">||</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getSum</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>类似参数的默认值写法</p><p>逻辑运算符里的短路：只存在于&amp;&amp;与||中，当前者左边逻辑值为false时，右边不执行；当后者左边逻辑值为true时，右边不执行</p><p>&amp;&amp;若前后都是真，则返回最后一个真值，||输出第一个真值</p><p>无论&amp;&amp;还是||，运算结果都是最后被执行的表达式的值，一般用于变量赋值</p><hr><h2 id="_8-对象" tabindex="-1">8.对象 <a class="header-anchor" href="#_8-对象" aria-label="Permalink to &quot;8.对象&quot;">​</a></h2><p>object=属性+方法</p><p>声明：</p><p><code>let 对象名={} </code> 或者 <code> let 对象名 = new Object()</code></p><p>属性：信息特征；属性成对存在，包括属性名和值，之间用 <code>:</code>分割；多个属性之间用 <code>,</code>分割；属性就是依附在对象上的变量；属性名可以加&quot;&quot;或者&#39;&#39;</p><p>方法：功能行为</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> 对象名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">属性名</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">属性值</span></span>
<span class="line"><span style="color:#A6ACCD;">    方法名:函数</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>查询：<code>对象.属性</code></p><p><code>对象名[&#39;属性名&#39;]</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj-name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj-name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>赋值：<code>对象.属性=值</code></p><p>添加：<code>对象名.新属性名=值</code></p><p>删除：<code>delete 对象名.属性名</code></p><p>方法：方法名和函数两部分组成，使用:分割</p><p>多个属性之间使用,分割</p><p>方法是依附在对象中的函数</p><p>方法名可以加&quot;&quot;或者&#39;&#39;</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">方法名</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//函数体  </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>方法调用：<code>对象名.方法名()</code></p><p>对象遍历：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> arr)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//k为索引号，字符串型</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">k</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//不推荐遍历数组，推荐用来遍历对象</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">   uname</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">   age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//k为属性名 &#39;uname&#39;,&#39;age&#39;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>for in语法中的key是一个变量，在循环过程中依次代表对象的属性名，必须要 <code>[]</code>解析</p><p>内置对象：</p><p>JavaScript内部提供的对象，包括各种属性和方法供使用</p><p>例：Math内置对象</p><p>random：生成0-1随机数（不包括0和1）；cell：向上取整；floor：向下取整；max：最大数；min：最小数；pow：幂函数；abs：绝对值</p><hr><hr><h1 id="web-apis" tabindex="-1">Web APIs <a class="header-anchor" href="#web-apis" aria-label="Permalink to &quot;Web APIs&quot;">​</a></h1><p>作用：使用JavaScript操作HTML和浏览器，分为DOM文档对象模型和BOM浏览器对象模型</p><h2 id="_1-dom" tabindex="-1">1.DOM <a class="header-anchor" href="#_1-dom" aria-label="Permalink to &quot;1.DOM&quot;">​</a></h2><p>DOM：Document Object Model——文档对象模型，是用来呈现以及与任意HTML或XML文档交互的API</p><p>DOM树：将HTML文档以树状结构直观的表现</p><p>DOM对象：浏览器根据HTML标签生成的js对象</p><h3 id="_1-1获取元素" tabindex="-1">1.1获取元素 <a class="header-anchor" href="#_1-1获取元素" aria-label="Permalink to &quot;1.1获取元素&quot;">​</a></h3><h3 id="_1-2事件基础" tabindex="-1">1.2事件基础 <a class="header-anchor" href="#_1-2事件基础" aria-label="Permalink to &quot;1.2事件基础&quot;">​</a></h3><h3 id="_1-3事件进阶" tabindex="-1">1.3事件进阶 <a class="header-anchor" href="#_1-3事件进阶" aria-label="Permalink to &quot;1.3事件进阶&quot;">​</a></h3><h3 id="_1-4节点操作" tabindex="-1">1.4节点操作 <a class="header-anchor" href="#_1-4节点操作" aria-label="Permalink to &quot;1.4节点操作&quot;">​</a></h3><h2 id="_2-bom" tabindex="-1">2.BOM <a class="header-anchor" href="#_2-bom" aria-label="Permalink to &quot;2.BOM&quot;">​</a></h2><h3 id="_2-1操作浏览器" tabindex="-1">2.1操作浏览器 <a class="header-anchor" href="#_2-1操作浏览器" aria-label="Permalink to &quot;2.1操作浏览器&quot;">​</a></h3><h3 id="_2-2正则表达式" tabindex="-1">2.2正则表达式 <a class="header-anchor" href="#_2-2正则表达式" aria-label="Permalink to &quot;2.2正则表达式&quot;">​</a></h3>`,224),o=[e];function r(t,c,i,y,D,d){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{C as __pageData,b as default};
